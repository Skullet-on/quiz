{"version":3,"sources":["components/quiz/question/answers/index.jsx","components/quiz/question/index.jsx","components/quiz/win/index.jsx","components/quiz/index.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Answers","e","isCorrect","this","props","value","target","className","next","id","onClick","handleClick","ans","Component","Question","state","answers","shuffle","count","arr","j","temp","i","length","Math","floor","random","map","item","index","key","onNext","question","list","Win","window","location","reload","correct","fail","Quiz","questions","db","win","isblocked","q","milliseconds","console","log","setState","Promise","resolve","setTimeout","then","current","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"41EAGqBA,G,0LACPC,GACV,IAAMC,EAAYC,KAAKC,MAAMC,MAE3BJ,EAAEK,OAAOC,UADPL,EACmB,iBAEA,eAEvBC,KAAKC,MAAMI,KAAKP,EAAGC,K,+BAEX,IAAD,OACP,OACE,yBAAKO,GAAG,SAASF,UAAU,SAASG,QAAU,SAAAT,GAAC,OAAI,EAAKU,YAAYV,KAChEE,KAAKC,MAAMQ,S,GAbgBC,cCChBC,G,kBACnB,WAAYV,GAAO,IAAD,8BAChB,4CAAMA,KACDW,MAAQ,CACTC,QAAS,EAAKC,QAAQ,EAAKb,MAAMY,SACjCE,MAAO,GAJK,E,qEAQVC,GAEN,IADA,IAAIC,EAAGC,EACCC,EAAIH,EAAII,OAAS,EAAGD,EAAI,EAAGA,IAEjCD,EAAOF,EADPC,EAAII,KAAKC,MAAMD,KAAKE,UAAUJ,EAAI,KAElCH,EAAIC,GAAKD,EAAIG,GACbH,EAAIG,GAAKD,EAEX,OAAOF,I,6BAED,IAAD,OAEL,OADgBhB,KAAKY,MAAMC,QACZW,IAAI,SAACC,EAAMC,GAAP,OACjB,kBAAC,EAAD,CACEC,IAAMD,EACNjB,IAAMgB,EAAKE,IACXzB,MAAQuB,EAAKvB,MACbG,KAAO,SAACP,EAAGC,GAAJ,OAAkB,EAAKM,KAAKP,EAAGC,U,2BAGvCD,EAAGC,GACNC,KAAKC,MAAM2B,OAAO9B,EAAGC,K,+BAGrB,OACE,6BACE,yBAAKK,UAAU,YACXJ,KAAKC,MAAM4B,UAEb7B,KAAK8B,Y,GAtCuBpB,cCDjBqB,G,0LACPjC,GACVkC,OAAOC,SAASC,W,+BAER,IAAD,OACP,OACE,yBAAK9B,UAAU,aAAf,cAEE,yBAAKA,UAAU,SACb,+CAAsBJ,KAAKC,MAAMkC,SACjC,4CAAmBnC,KAAKC,MAAMmC,OAEhC,4BAAQhC,UAAU,SAASG,QAAU,SAAAT,GAAC,OAAI,EAAKU,YAAYV,KAA3D,e,GAZyBY,c,OCsFlB2B,G,kBAlFb,WAAYpC,GAAO,IAAD,8BAChB,4CAAMA,KACDW,MAAQ,CACT0B,UAAW,EAAKxB,QAAQyB,GACxBxB,MAAO,EACPyB,KAAK,EACLL,QAAS,EACTC,KAAM,EACNK,WAAW,GARC,E,qEAYVzB,GAEN,IADA,IAAIC,EAAGC,EACCC,EAAIH,EAAII,OAAS,EAAGD,EAAI,EAAGA,IAEjCD,EAAOF,EADPC,EAAII,KAAKC,MAAMD,KAAKE,UAAUJ,EAAI,KAElCH,EAAIC,GAAKD,EAAIG,GACbH,EAAIG,GAAKD,EAEX,OAAOF,I,8BAGDa,GAAW,IAAD,OAChB,GAAI7B,KAAKY,MAAM4B,IACb,OAAO,kBAAC,EAAD,CAAKL,QAAUnC,KAAKY,MAAMuB,QAAUC,KAAOpC,KAAKY,MAAMwB,OAE7D,IAAMM,EAAI1C,KAAKY,MAAM0B,UAAUT,GAC/B,OAAO,kBAAC,EAAD,CACLF,IAAME,EACNA,SAAWa,EAAEb,SACbhB,QAAU6B,EAAE7B,QACZe,OAAS,SAAC9B,EAAGC,GAAJ,OAAkB,EAAKS,YAAYV,EAAGC,Q,kCAKzCD,EAAGC,GAAY,IAOR4C,EAPO,OACxB,GAAI3C,KAAKY,MAAM6B,UACbG,QAAQC,IAAI,eACP,CACL7C,KAAK8C,SAAS,CACZL,WAAW,KAEEE,EAGT,IAFG,IAAII,QAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASL,MAExCO,KAAK,WACXnD,EACF,EAAK+C,SAAS,CACZX,QAAS,EAAKvB,MAAMuB,QAAQ,IAG9B,EAAKW,SAAS,CACZV,KAAM,EAAKxB,MAAMwB,KAAK,IAGrB,EAAKxB,MAAMG,QAAU,EAAKH,MAAM0B,UAAUlB,OAAO,EACpD,EAAK0B,SAAS,CACZN,KAAK,IAGP,EAAKM,SAAS,CACZ/B,MAAO,EAAKH,MAAMG,MAAQ,IAG9B,EAAK+B,SAAS,CACZL,WAAW,S,+BAOjB,OACE,yBAAKrC,UAAU,QACXJ,KAAKmD,QAAQnD,KAAKY,MAAMG,Y,GA7EfL,cCMJ0C,MARf,WACE,OACE,yBAAKhD,UAAU,OACb,kBAAC,EAAD,QCKciD,QACW,cAA7BrB,OAAOC,SAASqB,UAEe,UAA7BtB,OAAOC,SAASqB,UAEhBtB,OAAOC,SAASqB,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMZ,KAAK,SAAAa,GACjCA,EAAaC,iB","file":"static/js/main.dd7f8066.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './answers.css'\r\n\r\nexport default class Answers extends Component {\r\n  handleClick(e){\r\n    const isCorrect = this.props.value\r\n    if (isCorrect) {\r\n      e.target.className = \"answer correct\"\r\n    } else {\r\n      e.target.className = \"answer wrong\"\r\n    }\r\n    this.props.next(e, isCorrect)\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"answer\" className=\"answer\" onClick={ e => this.handleClick(e) }>\r\n        { this.props.ans }\r\n      </div>\r\n    )\r\n  }\r\n}   \r\n","import React, { Component } from 'react'\r\nimport Answers from './answers'\r\nimport './question.css'\r\n\r\nexport default class Question extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n        answers: this.shuffle(this.props.answers),\r\n        count: 0\r\n    }\r\n  }\r\n\r\n  shuffle(arr){\r\n    var j, temp;\r\n    for(var i = arr.length - 1; i > 0; i--){\r\n      j = Math.floor(Math.random()*(i + 1));\r\n      temp = arr[j];\r\n      arr[j] = arr[i];\r\n      arr[i] = temp;\r\n    }\r\n    return arr;\r\n  }\r\n  list() {\r\n    const answers = this.state.answers;\r\n    return answers.map((item, index) => \r\n      <Answers \r\n        key={ index } \r\n        ans={ item.key }\r\n        value={ item.value }\r\n        next={ (e, isCorrect) => this.next(e, isCorrect) }\r\n      />)\r\n  }\r\n  next(e, isCorrect){\r\n    this.props.onNext(e, isCorrect)\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"question\">\r\n          { this.props.question }\r\n        </div>\r\n        { this.list() }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './win.css'\r\n\r\nexport default class Win extends Component {\r\n  handleClick(e){\r\n    window.location.reload();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"statistic\">\r\n        Your score:\r\n        <div className=\"stats\">\r\n          <p>Correct answers: { this.props.correct }</p>\r\n          <p>Fail answers: { this.props.fail }</p>\r\n        </div>\r\n        <button className=\"reload\" onClick={ e => this.handleClick(e) }>Reload</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Question from './question'\r\nimport Win from './win'\r\nimport db from './data.json'\r\nimport './quiz.css'\r\n\r\nclass Quiz extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n        questions: this.shuffle(db),\r\n        count: 0,\r\n        win: false,\r\n        correct: 0,\r\n        fail: 0,\r\n        isblocked: false\r\n    }\r\n  }\r\n\r\n  shuffle(arr){\r\n    var j, temp;\r\n    for(var i = arr.length - 1; i > 0; i--){\r\n      j = Math.floor(Math.random()*(i + 1));\r\n      temp = arr[j];\r\n      arr[j] = arr[i];\r\n      arr[i] = temp;\r\n    }\r\n    return arr;\r\n  }\r\n\r\n  current(question) {\r\n    if (this.state.win) {\r\n      return <Win correct={ this.state.correct } fail={ this.state.fail } />\r\n    } else {\r\n      const q = this.state.questions[question]\r\n      return <Question \r\n        key={ question } \r\n        question={ q.question }\r\n        answers={ q.answers }\r\n        onNext={ (e, isCorrect) => this.handleClick(e, isCorrect) }\r\n      />\r\n    }\r\n  }\r\n\r\n  handleClick(e, isCorrect) {\r\n    if (this.state.isblocked){\r\n      console.log(\"blocked\");\r\n    } else {\r\n      this.setState({\r\n        isblocked: true\r\n      })\r\n      const sleep = (milliseconds) => {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n      }\r\n      sleep(2000).then(() => {\r\n        if (isCorrect) {\r\n          this.setState({\r\n            correct: this.state.correct+1\r\n          })\r\n        } else {\r\n          this.setState({\r\n            fail: this.state.fail+1\r\n          })\r\n        }\r\n        if ( this.state.count === this.state.questions.length-1) {\r\n          this.setState({\r\n            win: true\r\n          })\r\n        } else {\r\n          this.setState({\r\n            count: this.state.count + 1\r\n          })\r\n        }\r\n        this.setState({\r\n          isblocked: false\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"quiz\">\r\n        { this.current(this.state.count) }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Quiz\r\n","import React from 'react';\nimport './App.css';\nimport Quiz from './quiz'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}